#include<stdio.h>
#include<conio.h>
int main()
{    
    
    int i,j,n,k,l,total=0,pos,temp,temp2,temp3,min,max_priority,max_ploc;
    float avg_wait,wait_temp;
    printf("\n************** Non Pre-emptive Scheduling Approach with Priority! **************");
    printf("\n\n Enter number of process: ");
    scanf("%d",&n);
    int burst[n],process[n],wait[n],arrival[n],turn[n];
    float priority[n];
    printf("\nEnter Burst Time:\n");
    for(i=0;i<n;i++)
    {
        printf("For Process %d:",i+1);
        scanf("%d",&burst[i]);
        process[i]=i+1;          
	} 
	printf("\nEnter Arrival Time:\n");
    for(i=0;i<n;i++)
    {
        printf("For Process %d:",i+1);
        scanf("%d",&arrival[i]);           
	}
	wait[0]=0;
	if(n>1)
	{
	min=arrival[0];
	pos=0;
	for(i=1;i<n;i++)
	{
	    if(arrival[i]<min)
		   {
		   min=arrival[i];
		   pos=i;
	       }
	    
	}
	temp=process[pos];
	temp2=burst[pos];
	temp3=arrival[pos];
    for(i=pos-1;i>=0;i--)
	{
		process[i+1]=process[i];
		burst[i+1]=burst[i];
		arrival[i+1]=arrival[i];
	}
	process[0]=temp;
	burst[0]=temp2;
	arrival[0]=temp3;
	
	
	for(i=1;i<n;i++)
	{   
	    wait_temp=(burst[i-1]+arrival[i-1]);
		for(j=i;j<n;j++)
		{   
		    
			if(arrival[j]<=wait_temp)
		      {
			   priority[j]=1+((wait_temp-arrival[j])/burst[j]);
		      }
		    else
		      {
			   priority[j]=0;
		      }
		      
	    }
	    
	    
	    max_ploc=i;
	    max_priority=priority[i];
	    for(k=i+1;k<n;k++)
		{
			if(max_priority<priority[k])
			{
				max_priority=priority[k];
				max_ploc=k;
			}
		}
		
		temp=process[max_ploc];
	    temp2=burst[max_ploc];
	    temp3=arrival[max_ploc];
	    for(l=max_ploc-1;l>=i;l--)
         	{
		process[l+1]=process[l];
		burst[l+1]=burst[l];
		arrival[l+1]=arrival[l];
	        }
	    process[i]=temp;
	    burst[i]=temp2;
	    arrival[i]=temp3;
	}
	wait_temp=arrival[0];
	for(i=1;i<n;i++)
	{   
	    wait_temp +=burst[i-1];
		wait[i]=wait_temp-arrival[i];
		if(wait[i]<0)
		wait[i]=0;
	}	
	
	
	for(i=0;i<n;i++)	
	{ 
	  turn[i]=wait[i]+burst[i];
	}

    }
    else
    turn[0]=burst[0]; 
	for(i=0;i<n;i++)
	{   if(wait[i]>0)
		avg_wait +=(float)wait[i]/n;
    }
	total=(wait[n-1]+burst[n-1]+arrival[n-1]);
    printf(" _______________________________________________________________________________________________");
    printf("\n| Process\t    Burst Time    \tArrival Time\t Waiting Time\t Turnaround Time\t|\n");
    for(i=0;i<n;i++)
    {
        
        printf("\n| P%d\t\t\t   %d\t\t      %d\t    \t\t%d\t   \t%d\t\t|",process[i],burst[i],arrival[i],wait[i],turn[i]);
    }
    printf("\n _______________________________________________________________________________________________");
    printf("\n Average Waiting time is %f",avg_wait);
    printf("\n Total time taken by all the process %d",total);
}
